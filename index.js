let hexa_cod = [
            0xf0,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
];

let ip_ref = new Array(); // quarda onde cada ip esta
let sq_vod = new Array(); // sem uso, por enquant..

let glob_sID = 1; // inicio da sequência vazia
let glob_eID = 9; // final da sequência

class updatHex {
    _dec2hex(_number){
        return '0x'+_number.toString(16);
	}
    
    addData(ip,infos) {

        for (let lp=glob_sID,la=0; lp<(glob_eID-4); lp++,la++) hexa_cod[lp] = parseInt(this._dec2hex(Number(ip[la])), 16);

		for (let lp=(glob_eID-4),la=0; lp<glob_eID; lp++,la++) hexa_cod[lp] = parseInt(this._dec2hex(Number(infos[la])), 16);

        ip_ref.push(ip.join(''));  // ip colocado na pilha..
        ip_ref.push(`${glob_sID}:${glob_eID}`);  // sequencia do ip

        glob_sID = glob_eID+0; // +0 estética
		glob_eID = glob_eID+8; // nova sequência livre.
		
    }


    remData(ipRef,infos) {
        ip_ref.forEach((a,b,c)=>{
            if (a === ipRef.join('')){
               let aux = c[b+1];
		       let ind = aux.split(':');

				console.log(ind);
                
				for (let lp=Number(ind[0]); lp<Number(ind[1]); lp++){
				    hexa_cod[lp] = 0x00 ;
                  
				}

		    }
		});
    }

}

let test = new updatHex;








console.log(hexa_cod)
test.addData([20,195,199,54],[161,247,08,02]);
test.addData([20,195,199,54],[162,247,08,02]);

test.remData([20,195,199,54],[161,247,08,02]);

console.log(hexa_cod);
